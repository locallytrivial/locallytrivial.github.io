<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Tensors - Tag - Jim W. Kennington</title><link>http://locallytrivial.com/tags/tensors/</link><description>Tensors - Tag - Jim W. Kennington</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 23 Apr 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://locallytrivial.com/tags/tensors/" rel="self" type="application/rss+xml"/><item><title>Tensor Type Notation</title><link>http://locallytrivial.com/posts/tensor-type-notation/</link><pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate><author>Jim Kennington</author><guid>http://locallytrivial.com/posts/tensor-type-notation/</guid><description>What does type (r, s) mean? I&amp;rsquo;d like to discuss the notation of the tensor type, commonly denoted $(r, s)$ as it relates to the tensor product. Specifically, the ordering of the vector spaces and dual vector spaces involved in the product. The order matters since tensors are typically categorized by the number of vectors and dual vectors they require as arguments. To avoid ambiguity, for a given tensor $T$, I will denote the number of vector arguments as $n_v$ and the number of dual vector arguments as $n_d$.</description></item><item><title>Tensor Product for Programmers</title><link>http://locallytrivial.com/posts/tensor-product-programmer/</link><pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate><author>Jim Kennington</author><guid>http://locallytrivial.com/posts/tensor-product-programmer/</guid><description>The introduction to tensor products and tensor algebras is often riddled with rigor, in which a mathematician would delight but a programmer would despair. I find myself in the intersection of these camps and while I appreciate notation, a simpler introduction is possible using functional programming concepts.
Tensors are defined and introduced in two equivalent ways. The first way, called the &amp;ldquo;expansion coefficient&amp;rdquo; (or array) style of introducing tensors relies on many indices and iterates over the n dimensions of some array (n-dimensional generalization of a matrix).</description></item></channel></rss>