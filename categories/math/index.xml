<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Math - Category - Jim W. Kennington</title><link>http://locallytrivial.com/categories/math/</link><description>Math - Category - Jim W. Kennington</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>jameswkennington@psu.edu (Jim Kennington)</managingEditor><webMaster>jameswkennington@psu.edu (Jim Kennington)</webMaster><lastBuildDate>Mon, 04 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://locallytrivial.com/categories/math/" rel="self" type="application/rss+xml"/><item><title>Simple Group Isomorphism Example: D6 and S3</title><link>http://locallytrivial.com/posts/20240304-groups-simple-iso/</link><pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate><author>jameswkennington@psu.edu (Jim Kennington)</author><guid>http://locallytrivial.com/posts/20240304-groups-simple-iso/</guid><description>
Overview Definition: Group A group is a set $X$ along with an associative binary operator $\cdot : X \times X \to X$ For more detail on groups see [^1]. References</description></item><item><title>Found This Week #1</title><link>http://locallytrivial.com/posts/ftw-20210919/</link><pubDate>Sun, 19 Sep 2021 00:00:00 +0000</pubDate><author>jameswkennington@psu.edu (Jim Kennington)</author><guid>http://locallytrivial.com/posts/ftw-20210919/</guid><description>As this is the inaugural issue of the found-this-week series, I&amp;rsquo;ll briefly note my motivation and inspiration. The title of this series is an overt nod to the famous series This Week&amp;rsquo;s Finds written by the inimitable John Baez. I have learned a great deal from that series and his book on gravity, and have the utmost admiration for Baez&amp;rsquo; abilities as a physicist and communicator. It is my hope that this series will be found useful by some, insightful by at least a few, and accessible by many.</description></item><item><title>Algebra Ladder</title><link>http://locallytrivial.com/posts/algebra-ladder/</link><pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate><author>jameswkennington@psu.edu (Jim Kennington)</author><guid>http://locallytrivial.com/posts/algebra-ladder/</guid><description><![CDATA[I first encountered a diagram of algebraic structures at the end of Jeevanjee&rsquo;s second chapter, &ldquo;Vector Spaces&rdquo;, which elegantly summarizes the high-level differences in structure between sets, vector spaces, and inner product spaces. 1
This diagram was immensely helpful to me, in that it helped show the relationships between various commonly used objects in mathematical physics. As I&rsquo;ve encountered new structures, I&rsquo;ve attempted to augment this map along two dimensions: a structure dimension that aims to measure the number of attributes an algebraic object has, and a specificity dimension which measures the amount of constraints placed on each attribute.]]></description></item><item><title>Erasing Efficiently</title><link>http://locallytrivial.com/posts/chalkboard-erasing/</link><pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate><author>jameswkennington@psu.edu (Jim Kennington)</author><guid>http://locallytrivial.com/posts/chalkboard-erasing/</guid><description>I&amp;rsquo;ve spent time focusing on the best chalkboards and chalks on my tools page, but -until recently- I&amp;rsquo;ve not spent much time thinking about the last part of the process &amp;ndash; erasing. At the suggestion of several colleagues, I played around with several different methods of erasing chalk marks to find which is most effective. The results were decisive. This post outlines the results, and attempts to present a simple test as justification (though my own testing was more extensive).</description></item><item><title>Tensor Type Notation</title><link>http://locallytrivial.com/posts/tensor-type-notation/</link><pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate><author>jameswkennington@psu.edu (Jim Kennington)</author><guid>http://locallytrivial.com/posts/tensor-type-notation/</guid><description>What does type (r, s) mean? I&amp;rsquo;d like to discuss the notation of the tensor type, commonly denoted $(r, s)$ as it relates to the tensor product. Specifically, the ordering of the vector spaces and dual vector spaces involved in the product. The order matters since tensors are typically categorized by the number of vectors and dual vectors they require as arguments. To avoid ambiguity, for a given tensor $T$, I will denote the number of vector arguments as $n_v$ and the number of dual vector arguments as $n_d$.</description></item><item><title>Tensor Product for Programmers</title><link>http://locallytrivial.com/posts/tensor-product-programmer/</link><pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate><author>jameswkennington@psu.edu (Jim Kennington)</author><guid>http://locallytrivial.com/posts/tensor-product-programmer/</guid><description>The introduction to tensor products and tensor algebras is often riddled with rigor, in which a mathematician would delight but a programmer would despair. I find myself in the intersection of these camps and while I appreciate notation, a simpler introduction is possible using functional programming concepts.
Tensors are defined and introduced in two equivalent ways. The first way, called the &amp;ldquo;expansion coefficient&amp;rdquo; (or array) style of introducing tensors relies on many indices and iterates over the n dimensions of some array (n-dimensional generalization of a matrix).</description></item></channel></rss>