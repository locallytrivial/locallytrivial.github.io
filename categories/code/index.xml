<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Code - Category - Jim W. Kennington</title><link>http://locallytrivial.com/categories/code/</link><description>Code - Category - Jim W. Kennington</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>jameswkennington@psu.edu (Jim Kennington)</managingEditor><webMaster>jameswkennington@psu.edu (Jim Kennington)</webMaster><lastBuildDate>Mon, 04 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://locallytrivial.com/categories/code/" rel="self" type="application/rss+xml"/><item><title>Namespacing SSH Credentials with Git</title><link>http://locallytrivial.com/posts/20240304-ssh-git-namespaces/</link><pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate><author>jameswkennington@psu.edu (Jim Kennington)</author><guid>http://locallytrivial.com/posts/20240304-ssh-git-namespaces/</guid><description>Why Namespace SSH Credentials with Git? Why would you ever want to namespace your SSH credentials with Git? If you have multiple accounts on the same Git hosting service, you might want to use different SSH keys for each account. This is a common scenario for developers who have both personal and work accounts on GitHub, GitLab, or Bitbucket. This post will show you how to set up SSH namespaces with Git, so you can use different SSH keys for different accounts on various hosting services.</description></item><item><title>Migration to Hugo</title><link>http://locallytrivial.com/posts/migration-to-hugo/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate><author>jameswkennington@psu.edu (Jim Kennington)</author><guid>http://locallytrivial.com/posts/migration-to-hugo/</guid><description>Motivation With the ebb of workload from first year graduate courses, I decided to rekindle the blog that I had setup a couple years prior. As a former professional Python developer, I had chosen Pelican as my static site generator (SSG) in late 2018. The set of plugins looked sufficient, and I could always write my own if needed. Fast-forward to this week, and the situation is different. The Hugo community has grown, broadened, and supported more use cases.</description></item><item><title>Standup, Hugo! Creating a Blog with Hugo</title><link>http://locallytrivial.com/posts/standup-hugo/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate><author>jameswkennington@psu.edu (Jim Kennington)</author><guid>http://locallytrivial.com/posts/standup-hugo/</guid><description><![CDATA[Preliminaries Let&rsquo;s quickly review what you&rsquo;ll need to build a Hugo blog, and what it will mean to have a Hugo blog at the end of the process.
What You&rsquo;ll Need Before we begin, you&rsquo;ll need a few things. I&rsquo;ll list the essentials below (as well as my recommendations where relevant)
Git, the ubiquitous VCS of the era GitHub account, for storing your blog content (and hosting for free!) Text Editor, for writing content and editing configuration files (I recommend either Sublime Text for simple uses or GoLand for those who also need to edit GO code for plugins) What You&rsquo;ll Have By the end of this post, the hope is that you will have:]]></description></item><item><title>Quick Python Setup</title><link>http://locallytrivial.com/posts/setup-guide/</link><pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate><author>jameswkennington@psu.edu (Jim Kennington)</author><guid>http://locallytrivial.com/posts/setup-guide/</guid><description>Motivation Python has increased in popularity to near ubiquity in the past five years. While the Python community (correctly) professes simplicity as a major accomplishment of the language, I still get a lot of questions about how to get a python environment setup properly. There are some lengthy guides out there on this - this post will aim to summarize and explain the relevant components to getting started.
Note: skip to bottom if you want quick install commands</description></item></channel></rss>